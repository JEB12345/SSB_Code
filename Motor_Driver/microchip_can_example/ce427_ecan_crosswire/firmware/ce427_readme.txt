Readme File for Code Example:

Crosswire Communication between ECAN 1 and ECAN 2 modules
---------------------------------------------------------

This file contains the following sections:
1. Hardware Requirements
2. Code Example Description
3. Folder Contents
4. Suggested Development Resources
5. Reconfiguring the project for a different dsPIC33E device
6. Revision History


1. Hardware Requirement:
----------------------------

The following boards are used for developing this code example

Explorer 16 Development Board
ECAN PicTail Card

The device used is dsPIC33EP512MU810/dsPIC33EP512GM710 

Connections to be done on the ECANPicTail Card - The Tx line of ECAN1 is connected to the Rx line of ECAN2 
and the Tx line of ECAN2 is connected to the Rx line of ECAN1. 

Alternatively a simple 2 node (ECAN1 and ECAN2) CAN BUS can be implemented using a twisted wire pair. This twisted wire pair must be connected at the output of the transcievers. Jumpers J7 and J6 must be set.

MPLLAB ICD2 Debugger/Programmer is used for debugging and running this code example.



2. Code Example Description:

----------------------------------------------------------------------------------------------------------------

Crosswire Communication between ECAN 1 and ECAN 2 modules

4 Message Buffers are defined for ECAN1 and ECAN2

Two message buffers are configured for ECAN1. One is configured as a Transmit Buffer to generate a Data Frame.
The other is configured as a Receive Buffer to receive message sent by ECAN2.

Two message buffers are configured for ECAN2. One is configured as a Transmit Buffer to generate a Data Frame.
The other is configured as a Receive Buffer to receive message sent by ECAN1.

Filters and Masks are enabled for both ECAN1 and ECAN2 for Message Reception
----------------------------------------------------------------------------------------------------------------


In this code example, the ECAN1 and ECAN2 modules are configured for operation at 1 Mbps over the CAN bus.
This is done in the main.c file.


The configuration of the two ECAN modules is done in the ECAN1Config.c and ECAN2Config.c files.


The number of message buffers to be allocated in DMA RAM are configured by using the following definitions
in the ECAN1Config.h and ECAN2Config.h file.

#define  ECAN1_MSG_BUF_LENGTH
#define  ECAN2_MSG_BUF_LENGTH

The aligment attribute is used to make sure that the DMA allocates the base address for the peripheral
correctly and assigns an offset based on this base address. This is essential when using peripheral indirect
addressing mode of DMA, where the effective address is computed based on the base address partially and an 
address generated by the peripheral. (in this case ECAN).

__attribute__((eds,space(dma),aligned(Number of bytes)));

The number of bytes may be decided based on the number of buffers being configured by the definition made earlier.
This is calculated as follows -

Number of bytes = (ECAN1_MSG_BUF_LENGTH * Number of words in one buffer)*2 and
Number of bytes = (ECAN2_MSG_BUF_LENGTH * Number of words in one buffer)*2.

For eg : If 4 message buffers are defined as

#define  ECAN1_MSG_BUF_LENGTH 4, then,
Number of bytes = 4 * 8 * 2 = 64 (because Number of words in one buffer = 8 for ECAN).


The information on transmit message identifiers and other bits are written as arguments into these functions


ecan1TransmitMsg(unsigned int buf, long txIdentifier, unsigned int ide, unsigned int remoteTransmit, unsigned int srr, unsigned int dataLength );
ecan1TxData(unsigned int buf, unsigned int data1, unsigned int data2, unsigned int data3, unsigned int data4);
ecan2TransmitMsg(unsigned int buf, long txIdentifier, unsigned int ide, unsigned int remoteTransmit, unsigned int srr, unsigned int dataLength );
ecan2TxData(unsigned int buf, unsigned int data1, unsigned int data2, unsigned int data3, unsigned int data4);


The information on message acceptance filters and masks are written as arguments into these function


ecan1Filter(int n, long identifier, unsigned int exide,unsigned int bufPnt,unsigned int maskSel);
ecan1Mask(int m, long identifierMask, unsigned int mide);
ecan2Filter(int n, long identifier, unsigned int exide,unsigned int bufPnt,unsigned int maskSel);
ecan2Mask(int m, long identifierMask, unsigned int mide);


Note :- The PPS configuration in the ecan1_config.c and ecan2_config.c source files change with the device being used. THe user is advised
to refer the datasheet and use the appropriate values for RPINR/RPOR registers for proper operation.

3. Folder Contents:
-------------------
a. firmware
        This folder contains all the C, Assembler source files and include files(*.c,
        *.s, *.h) and project specific files used in demonstrating the described example. 
b. system_config
		This folder contains the chipset specific configuration code. More specifically it inturn contains a folder called exp16/ 
		which holds configuration files.
c. exp16/
		This folder contains various folders like dspic33ep512gm710/dspic33ep512mu810/dspic33ep256gp506 depending on the platform.Each platform folder contain,configuration 
		specific source files.

4. Suggested Development Resources:
-----------------------------------
        a. Explorer 16 Demo board with dspic33ep512gm710/dspic33ep512mu810 controller
	b. ECAN PicTail Card 

4. Reconfiguring the project for a different dsPIC33E device:
-------------------------------------------------------------
The Project/Workspace can be easily reconfigured for dspic33ep512gm710/dspic33ep512mu810 device.
Please use the following general guidelines:
        a. Change device selection within MPLAB® IDE to dspic33ep512gm710/dspic33ep512mu810 device of
        your choice by using the following menu option:
        MPLAB X>>Configuration drop-down option>><Listed Device Configuration>

        b. Re-build the MPLAB® project using the menu option:
        MPLAB X>>Build Main Project

        c. Download the hex file into the device and run.

6. Revision History :
---------------------
        10/05/2006 - Initial Release of the Code Example
	07/01/2010 - Code Example updated for dsPIC33E
        02/11/2014 - Code Example updated for dspic33ep512gm710/dspic33ep512mu810